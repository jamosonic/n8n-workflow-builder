{
  "name": "Reddit Viral Scanner - Groq Edition",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "*/15 * * * *"
            }
          ]
        }
      },
      "id": "trigger-15min",
      "name": "Every 15 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "subreddits",
              "name": "subreddits",
              "value": "=[\n  \"AskReddit\",\n  \"todayilearned\", \n  \"LifeProTips\",\n  \"unpopularopinion\",\n  \"Showerthoughts\",\n  \"explainlikeimfive\",\n  \"relationships\",\n  \"AmItheAsshole\",\n  \"personalfinance\",\n  \"fitness\"\n]",
              "type": "array"
            },
            {
              "id": "minUpvotes",
              "name": "minUpvotes", 
              "value": 50,
              "type": "number"
            },
            {
              "id": "timeFilter",
              "name": "timeFilter",
              "value": "hour",
              "type": "string"
            }
          ]
        }
      },
      "id": "set-config",
      "name": "Set Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-subreddits",
      "name": "Split Subreddits",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://www.reddit.com/r/{{ $json.subreddits }}/top.json",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "limit",
                "value": "25"
              },
              {
                "name": "t",
                "value": "={{ $node[\"Set Config\"].json.timeFilter }}"
              }
            ]
          },
          "headers": {
            "headers": [
              {
                "name": "User-Agent",
                "value": "ContentBot/1.0 (by /u/YourUsername)"
              }
            ]
          }
        },
        "sendQuery": true,
        "sendHeaders": true
      },
      "id": "fetch-reddit",
      "name": "Fetch Reddit Posts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract and filter Reddit posts\nconst data = $input.first().json.data;\nconst minUpvotes = $node[\"Set Config\"].json.minUpvotes;\nconst posts = [];\n\nfor (const child of data.children) {\n  const post = child.data;\n  \n  // Filter criteria\n  if (post.ups >= minUpvotes && \n      !post.is_self && // External links only\n      post.selftext.length < 500 && // Short posts\n      !post.stickied &&\n      !post.over_18) {\n    \n    posts.push({\n      id: post.id,\n      title: post.title,\n      score: post.ups,\n      num_comments: post.num_comments,\n      subreddit: post.subreddit,\n      author: post.author,\n      url: post.url,\n      permalink: `https://reddit.com${post.permalink}`,\n      created_utc: post.created_utc,\n      selftext: post.selftext,\n      // Viral potential score (basic)\n      engagement_rate: post.num_comments / Math.max(post.ups, 1),\n      viral_score: Math.log(post.ups + 1) * Math.log(post.num_comments + 1)\n    });\n  }\n}\n\n// Sort by viral score descending\nposts.sort((a, b) => b.viral_score - a.viral_score);\n\nreturn posts.slice(0, 10).map(post => ({ json: post }));"
      },
      "id": "process-posts",
      "name": "Process & Filter Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "viral-threshold",
              "leftValue": "={{ $json.viral_score }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-viral",
      "name": "Filter High Viral Potential",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "groqApi",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mixtral-8x7b-32768\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a viral content analyst. Analyze Reddit posts for their potential to generate engaging short-form video content. Rate viral potential 1-10 and suggest content angles. Return JSON format: {\\\"viral_rating\\\": number, \\\"content_angle\\\": string, \\\"hook_potential\\\": string, \\\"target_platforms\\\": array, \\\"reasoning\\\": string}\"\n    },\n    {\n      \"role\": \"user\", \n      \"content\": \"Analyze this Reddit post:\\n\\nTitle: {{ $json.title }}\\nSubreddit: r/{{ $json.subreddit }}\\nScore: {{ $json.score }} upvotes\\nComments: {{ $json.num_comments }}\\nContent: {{ $json.selftext || 'No text content' }}\\n\\nViral Score: {{ $json.viral_score }}\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 500\n}"
      },
      "id": "groq-analysis",
      "name": "Groq Viral Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Groq response and combine with Reddit data\nconst redditData = $input.first().json;\nconst groqResponse = $input.last().json;\n\ntry {\n  const analysis = JSON.parse(groqResponse.choices[0].message.content);\n  \n  return {\n    json: {\n      // Original Reddit data\n      reddit_id: redditData.id,\n      title: redditData.title,\n      subreddit: redditData.subreddit,\n      score: redditData.score,\n      num_comments: redditData.num_comments,\n      url: redditData.url,\n      permalink: redditData.permalink,\n      created_utc: redditData.created_utc,\n      viral_score: redditData.viral_score,\n      \n      // AI Analysis\n      ai_viral_rating: analysis.viral_rating,\n      content_angle: analysis.content_angle,\n      hook_potential: analysis.hook_potential,\n      target_platforms: analysis.target_platforms,\n      ai_reasoning: analysis.reasoning,\n      \n      // Combined scoring\n      final_score: (redditData.viral_score + analysis.viral_rating) / 2,\n      \n      // Metadata\n      analyzed_at: new Date().toISOString(),\n      status: 'analyzed'\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      ...redditData,\n      ai_viral_rating: 0,\n      error: 'Failed to parse AI response',\n      status: 'error',\n      analyzed_at: new Date().toISOString()\n    }\n  };\n}"
      },
      "id": "combine-data",
      "name": "Combine Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "high-rating",
              "leftValue": "={{ $json.ai_viral_rating }}",
              "rightValue": 6,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-ai-rating",
      "name": "Filter AI Rating >= 6",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": {
          "__rl": true,
          "value": "content_pipeline",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "trend_id": "={{ $json.reddit_id }}",
            "content_title": "={{ $json.title }}",
            "subreddit": "={{ $json.subreddit }}",
            "reddit_score": "={{ $json.score }}",
            "num_comments": "={{ $json.num_comments }}",
            "viral_score": "={{ $json.viral_score }}",
            "ai_viral_rating": "={{ $json.ai_viral_rating }}",
            "final_score": "={{ $json.final_score }}",
            "content_angle": "={{ $json.content_angle }}",
            "hook_potential": "={{ $json.hook_potential }}",
            "target_platforms": "={{ JSON.stringify($json.target_platforms) }}",
            "ai_reasoning": "={{ $json.ai_reasoning }}",
            "source_url": "={{ $json.url }}",
            "reddit_permalink": "={{ $json.permalink }}",
            "content_status": "discovered",
            "created_at": "={{ $json.analyzed_at }}"
          }
        },
        "options": {}
      },
      "id": "save-supabase",
      "name": "Save to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2220,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.raindrop.io/rest/v1/raindrop",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "raindropApi", 
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{ $credentials.raindropApi.token }}\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"link\": \"{{ $json.permalink }}\",\n  \"title\": \"{{ $json.title }}\",\n  \"excerpt\": \"{{ $json.content_angle }}\",\n  \"tags\": [\n    \"viral-content\",\n    \"r/{{ $json.subreddit }}\",\n    \"score-{{ $json.ai_viral_rating }}\",\n    \"auto-discovered\"\n  ],\n  \"collection\": {\n    \"$id\": \"{{ $env.RAINDROP_COLLECTION_ID }}\"\n  }\n}"
      },
      "id": "save-raindrop",
      "name": "Save to Raindrop",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2440,
        300
      ]
    },
    {
      "parameters": {
        "workflowId": "{{ $env.CONTENT_GENERATION_WORKFLOW_ID }}",
        "source": "parameter",
        "parameters": {
          "parameters": [
            {
              "name": "trend_data",
              "value": "={{ $json }}"
            },
            {
              "name": "target_platforms",
              "value": "={{ $json.target_platforms }}"
            },
            {
              "name": "content_type",
              "value": "short-form-video"
            }
          ]
        }
      },
      "id": "trigger-content-gen",
      "name": "Trigger Content Generation",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        2660,
        300
      ]
    }
  ],
  "connections": {
    "Every 15 Minutes": {
      "main": [
        [
          {
            "node": "Set Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Config": {
      "main": [
        [
          {
            "node": "Split Subreddits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Subreddits": {
      "main": [
        [
          {
            "node": "Fetch Reddit Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Reddit Posts": {
      "main": [
        [
          {
            "node": "Process & Filter Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process & Filter Posts": {
      "main": [
        [
          {
            "node": "Filter High Viral Potential",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter High Viral Potential": {
      "main": [
        [
          {
            "node": "Groq Viral Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Viral Analysis": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data": {
      "main": [
        [
          {
            "node": "Filter AI Rating >= 6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter AI Rating >= 6": {
      "main": [
        [
          {
            "node": "Save to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Supabase": {
      "main": [
        [
          {
            "node": "Save to Raindrop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Raindrop": {
      "main": [
        [
          {
            "node": "Trigger Content Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-13T10:00:00.000Z",
  "versionId": "initial"
}
